describe DevKit::Eth::Wallet do
  let(:public_key) { "0x9bbF956cB1F2A84895BC5374341eE9dd44Ea5c35" }
  let(:private_key) { "ca8947b9b508ef029a6e7bf3eb5e02146555772722aa06298d81fd47454323f4" }

  describe "#typed_data_valid?" do
    subject do
      DevKit::Eth::Wallet.new(pub: public_key).typed_data_valid?(
        {
          version: "1",
          name: "App",
          chainId: 421613
        },
        {
          Auth: [
            { name: "nonce", type: "string" },
            { name: "walletAddress", type: "address" }
          ]
        },
        {
          nonce: "something",
          walletAddress: public_key
        },
        signature
      )
    end

    context "when signature is not long enough" do
      let(:signature) { "46cdfec67261bf90b0278153a295efc1ecea5e8137959a6622e495610771435123f722dd3c445f1cea86fdcc8b7abba4" }

      it { is_expected.to eq(false) }
    end

    context "when signature contains invalid chain id" do
      let(:signature) { "46cdfec67261bf90b0278153a295efc1ecea5e8137959a6622e495610771435123f722dd3c445f1cea86fdcc8b7abba40effdaf2c7e0bbce2294c0b0334dd59123" }

      it { is_expected.to eq(false) }
    end

    context "when signature is invalid" do
      let(:signature) { "46cdfec67261bf90b0278153a295efc1ecea5e8137959a6622e495610771435123f722dd3c445f1cea86fdcc8b7abba40effdaf2c7e0bbce2294c0b0334dd59e1b" }

      it { is_expected.to eq(false) }
    end

    context "when signature is valid" do
      let(:signature) { "46cdfec67261bf90b0278153a295efc1ecea5e8137959a6622e495610771435827f722dd3c445f1cea86fdcc8b7abba40effdaf2c7e0bbce2294c0b0334dd59e1b" }

      it "verify signature generated by NodeJS successfully" do
        is_expected.to eq(true)
      end
    end
  end
end
